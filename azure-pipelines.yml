trigger:
- master

jobs:
- job: Windows_Image_Build
  dependsOn: Provision_A2
  variables:
    automate_fqdn: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_fqdn'] ]
    automate_credentials_username: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_credentials_username'] ]
    automate_credentials_password: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_credentials_password'] ]
    chef_automate_token: $[ dependencies.Provision_A2.outputs['a2_set_vars.chef_automate_token'] ]
  pool:
    vmImage: 'windows-2019'
  steps:
  - powershell: |
        Write-Host "AUTOMATE_FQDN: $env:AUTOMATE_FQDN"
        Write-Host "AUTOMATE_USERNAME: $env:AUTOMATE_USERNAME"
        Write-Host "AUTOMATE_PASSWORD: $env:AUTOMATE_PASSWORD"
        Write-Host "AUTOMATE_TOKEN: $env:AUTOMATE_TOKEN"
    env:
      AUTOMATE_FQDN: $(automate_fqdn)
      AUTOMATE_USERNAME: $(automate_credentials_username)
      AUTOMATE_PASSWORD: $(automate_credentials_password)
      AUTOMATE_TOKEN: $(chef_automate_token)   
  - task: replacetokens@3
    displayName: "Populate Packer Inspec Config"
    inputs:
      rootDirectory: 'packer/inspec'
      targetFiles: '**/*.json'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '__'
      tokenSuffix: '__'     
  - task: vsts-habitat-install@3
  - task: PowerShell@2
    displayName: 'Install packer Habitat package'
    inputs:
      targetType: 'inline'
      script: |
        C:\\ProgramData\\habitat\\hab license accept
        C:\\ProgramData\\habitat\\hab pkg install jonlives/packer
  - task: PowerShell@2
    displayName: 'Set up packer environment variables'
    inputs:
      targetType: 'inline'
      script: |
         $tools="$(C:\\ProgramData\\habitat\\hab pkg path jonlives/packer)/bin"
         Write-Host $tools
         Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};${tools}";      
  - task: PackerBuild@1
    displayName: 'Packer Build'
    inputs:
      templateType: 'custom'
      customTemplateLocation: 'packer/windows-2016.json'
      imageUri: 'effortless-windows-2016'     
- job: Linux_Image_Build
  dependsOn: Provision_A2
  variables:
    automate_fqdn: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_fqdn'] ]
    automate_credentials_username: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_credentials_username'] ]
    automate_credentials_password: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_credentials_password'] ]
    chef_automate_token: $[ dependencies.Provision_A2.outputs['a2_set_vars.chef_automate_token'] ]
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - powershell: |
        Write-Host "AUTOMATE_FQDN: $env:AUTOMATE_FQDN"
        Write-Host "AUTOMATE_USERNAME: $env:AUTOMATE_USERNAME"
        Write-Host "AUTOMATE_PASSWORD: $env:AUTOMATE_PASSWORD"
        Write-Host "AUTOMATE_TOKEN: $env:AUTOMATE_TOKEN"
    env:
      AUTOMATE_FQDN: $(automate_fqdn)
      AUTOMATE_USERNAME: $(automate_credentials_username)
      AUTOMATE_PASSWORD: $(automate_credentials_password)
      AUTOMATE_TOKEN: $(chef_automate_token)   
  - task: replacetokens@3
    displayName: "Populate Packer Inspec Config"
    inputs:
      rootDirectory: 'packer/inspec'
      targetFiles: '**/*.json'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '__'
      tokenSuffix: '__'     
  - task: Bash@3
    displayName: 'Install packer Habitat package'
    inputs:
      targetType: 'inline'
      script: |
        curl https://raw.githubusercontent.com/habitat-sh/habitat/master/components/hab/install.sh | sudo bash
        hab license accept
        sudo hab pkg install core/packer
  - task: PackerBuild@1
    displayName: 'Packer Build'
    inputs:
      templateType: 'custom'
      customTemplateLocation: 'packer/rhel-7.json'
      imageUri: 'effortless-rhel-7'   
- job: Provision_A2
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: AzureResourceManagerTemplateDeployment@3
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: 'AzureJunk'
      subscriptionId: '1dafd80e-7859-41e6-9ce6-3bf0ac90feac'
      action: 'DeleteRG'
      resourceGroupName: 'AzureDevOps'
  - task: AzureResourceManagerTemplateDeployment@3
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: 'AzureJunk'
      subscriptionId: '1dafd80e-7859-41e6-9ce6-3bf0ac90feac'
      action: 'Create Or Update Resource Group'
      resourceGroupName: 'AzureDevOps'
      location: 'North Central US'
      templateLocation: 'URL of the file'
      csmFileLink: 'https://chefmanagedapp.blob.core.windows.net/files/mainTemplate.json'
      csmParametersFileLink: 'https://raw.githubusercontent.com/chef-partners/camsa-templates/master/samples/parameters.json'
      overrideParameters: '-prefix $(ARM_PREFIX) -virtualNetworkName $(ARM_PREFIX)network -customerResourceGroupName $(ARM_RESOURCE_GROUP_NAME) -subnetName $(ARM_PREFIX)subnet -chefUsername admin -chefUserFullname Admin -chefUserEmailaddress admin@example.com -chefUserPassword $(ARM_CHEF_PASSWORD) -chefOrg effortless -chefOrgDescription Effortless -sshSourceAddresses ["34.206.89.3/32"] -sshPublicKeys ["$(ARM_SSH_PUBLIC_KEY)"]'
      deploymentMode: 'Incremental'
  - task: ARM Outputs@5
    inputs:
      ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
      ConnectedServiceNameARM: 'AzureJunk'
      resourceGroupName: 'AzureDevOps'
      prefix: 'bwilla'
      whenLastDeploymentIsFailed: 'fail'
  - powershell: |
        $params = @("automate_fqdn", "automate_credentials_username", "automate_credentials_password", "chef_automate_token")     
        foreach ($param in $params) {
          (Invoke-RestMethod -Uri https://$(ARM_PREFIX)-$(camsauniqueShort)-AppService.azurewebsites.net/api/config/${param}?code=$(camsaconfigStoreFunctionApiKey)).psobject.members | Where-Object membertype -like "noteproperty" | % { "##vso[task.setvariable variable={0};isOutput=true;]{1}" -f $_.name, $_.value }
        }
    name: a2_set_vars  
    displayName: 'Set A2 Pipeline Variables'
  - powershell: |
        Write-Host "AUTOMATE_FQDN: $env:AUTOMATE_FQDN"
        Write-Host "AUTOMATE_USERNAME: $env:AUTOMATE_USERNAME"
        Write-Host "AUTOMATE_PASSWORD: $env:AUTOMATE_PASSWORD"
        Write-Host "AUTOMATE_TOKEN: $env:AUTOMATE_TOKEN"
    displayName: 'Output A2 Settings'
    env:
      AUTOMATE_FQDN: $(a2_set_vars.automate_fqdn)
      AUTOMATE_USERNAME: $(a2_set_vars.automate_credentials_username)
      AUTOMATE_PASSWORD: $(a2_set_vars.automate_credentials_password)
      AUTOMATE_TOKEN: $(a2_set_vars.chef_automate_token) 
- job: Provision_Infrastructure
  dependsOn: 
    - Windows_Image_Build
    - Linux_Image_Build
    - Provision_A2
  variables:
    automate_fqdn: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_fqdn'] ]
    automate_credentials_username: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_credentials_username'] ]
    automate_credentials_password: $[ dependencies.Provision_A2.outputs['a2_set_vars.automate_credentials_password'] ]
    chef_automate_token: $[ dependencies.Provision_A2.outputs['a2_set_vars.chef_automate_token'] ]
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: TerraformInstaller@0
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: '0.12.6'
  - task: replacetokens@3
    displayName: "Populate terraform backend config"
    inputs:
      rootDirectory: 'terraform'
      targetFiles: '**/*.tf*'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '__'
      tokenSuffix: '__'    
  - task: replacetokens@3
    displayName: "Populate Effortless App config"
    inputs:
      rootDirectory: 'terraform/files'
      targetFiles: '**/*.toml*'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '__'
      tokenSuffix: '__'    
  - task: TerraformTaskV1@0
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      backendServiceArm: 'AzureJunk'
      backendAzureRmResourceGroupName: 'AzureDevOps'
      backendAzureRmStorageAccountName: 'bwilliamazdevops'
      backendAzureRmContainerName: 'azuredevops'
      backendAzureRmKey: 'terraform.tfstate'
  - task: TerraformTaskV1@0
    inputs:
      provider: 'azurerm'
      command: 'destroy'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      environmentServiceNameAzureRM: 'AzureJunk'
  - task: TerraformTaskV1@0
    inputs:
      provider: 'azurerm'
      command: 'plan'
      environmentServiceNameAzureRM: 'AzureJunk'
  - task: TerraformTaskV1@0
    inputs:
      provider: 'azurerm'
      command: 'apply'
      environmentServiceNameAzureRM: 'AzureJunk'
